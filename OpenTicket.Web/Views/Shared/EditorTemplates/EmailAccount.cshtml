@using OpenTicket.Data.Entity
@model OpenTicket.Domain.MailClient.EmailAccount
@{
    var protocols = Enum.GetValues(typeof(MailProtocolType)).Cast<MailProtocolType>().Select(protocol => new SelectListItem
    {
        Text = protocol.Humanize(),
        Value = ((int)protocol).ToString()
    });
}
<div class="form-group">
    @Html.LabelFor(p => p.Email)
    @Html.TextBoxFor(p => p.Email, new { @class = "form-control" })
</div>
<div class="form-group remote-only">
    <label for="@Html.IdFor(p => p.ExternalAccountId)">External Account</label>
    <select name="@Html.IdFor(p => p.ExternalAccountId)" id="@Html.IdFor(p => p.ExternalAccountId)" class="form-control"></select>
</div>
<div class="form-group form-check">
    @Html.CheckBoxFor(p => p.IsActive, new { @class = "form-check-input" })
    @Html.LabelFor(p => p.IsActive, new { @class = "form-check-label" })
</div>
<div class="form-group local-only">
    @Html.LabelFor(p => p.Username)
    @Html.TextBoxFor(p => p.Username, new { @class = "form-control" })
</div>
<div class="form-group local-only">
    @Html.LabelFor(p => p.Password)
    @Html.PasswordFor(p => p.Password, new { @class = "form-control" })
</div>
<div class="form-group">
    @Html.LabelFor(p => p.Protocol)
    @Html.DropDownListFor(p => p.Protocol, protocols, new { @class = "form-control" })
</div>
<div class="form-group local-only">
    @Html.LabelFor(p => p.ServerAddress)
    @Html.TextBoxFor(p => p.ServerAddress):@Html.TextBoxFor(p => p.ServerPort, new { type = "number" })
    @Html.CheckBoxFor(p => p.UseSecureConnection, new { @class = "form-control" }) Use secure connection
</div>
<div class="form-group imap-only">
    @Html.LabelFor(p => p.MailBox)
    @Html.TextBoxFor(p => p.MailBox)
</div>
<button id="btn-submit" type="submit" class="btn btn-primary">Submit</button>
<button id="btn-login" type="submit" class="btn btn-primary remote-only">Sign In</button>
<script src="@Url.Content("~/assets/js/email-account.js")"></script>